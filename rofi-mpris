#!/usr/bin/env bash
MPRIS_CTL=0
PLAYERCTL=1
DEFAULT_THEME="$HOME/.config/rofi/config.rasi"

HELP_STR="Usage: rofi-mpris [options] - Control MPRIS applications with rofi
  options:
    -m, --mpris-ctl                           Use mpris-ctl as MPRIS controller (DEFAULT)
    -p, --playerctl                           Use playerctl as MPRIS controller
    -f, --first-theme /path/to/theme.rasi     Set rofi theme for the first level menu
                                              Defaults to \$HOME/.config/rofi/config.rasi
    -s, --second-theme /path/to/theme.rasi    Set rofi theme for the second level menu
                                              Defaults to the first theme
    -h, --help                                Show this text"

get_custom_opts() {
    # setting up symbols used in the menu. 
    # these are defined here to be easily changed.
    declare -Ag labels=(
        ["play"]="󰐊"
        ["pause"]="󰏤"
        ["play_pause"]="󰐎"
        ["stop"]="󰓛"
        ["next"]="󰒭"
        ["prev"]="󰒮"
        ["loop"]="󰑖"
        ["shuffle"]="󰒝"
        ["active"]="󰝚"
        ["inactive"]="󰝛"
        ["target_all_players"]="All"
        ["target_all_active_players"]="Active"
        ["target_all_inactive_players"]="Inactive"
    )

    # can include "play" "pause" "play-pause" "stop" "next" "prev" "loop" "shuffle" in any order
    options=(
        "stop"
        "prev"
        "play_pause"
        "next"
        "loop"
    )
    special_targets=(
        "target_all_players"
        #"target_all_active_players" # mpris-ctl exclusive
        #"target_all_inactive_players" # mpris-ctl exclusive
    )
    
    # used in first level menu
    rofi_first_params=(
        -window-title "rofi-mpris"
        -dmenu # dont change
        -p ""
        -format i # dont change
        -theme "$FIRST_THEME"
    )
    
    # used in second level menu
    rofi_second_params=(
        -window-title "rofi-mpris"
        -dmenu # dont change
        -no-fixed-num-lines
        -selected-row 2 # <- row selected by default. useful
        -p ""
        -format i # dont change
        -theme "$SECOND_THEME"
    )

    # used for displaying actions in second level menu
    declare -a option_display_array
    for option in "${options[@]}"; do
        option_display_array+=("${labels["$option"]}")
    done
    option_display="$(printf "%s\n" "${option_display_array[@]}")"
}

main() {
    parse_args "$@"
    get_custom_opts
    while true; do
        readarray -t players <<<"$(get_players)"
        declare -a target_display=( ) 
        # ^ this holds all target labels and player information
        # the array gets converted to a string before being passed to rofi
        # we add special targets (all, active, inactive) separate from actual players
        for target in "${special_targets[@]}"; do
            target_display+=("${labels["$target"]}")
        done
        for player in "${players[@]}"; do
            target_display+=("$(get_player_info "$player")")
        done
        target_index="$(printf "%s\n" "${target_display[@]}" | rofi "${rofi_first_params[@]}")"
        [[ -z $target_index ]] && break
        # $target_index is empty if rofi gets passed ESC
        if [[ -n "${special_targets[$target_index]}" ]]; then
            # if index points to special target, use that
            target_label="${labels[${special_targets[$target_index]}]}"
            targeting_command="${commands[${special_targets[$target_index]}]}"
        else
            # otherwise we have to shift by the length of special targets 
            target_index=$((target_index - ${#special_targets[@]}))
            target_label="${players[$target_index]}"
            targeting_command="${commands["target_single_player"]} \"$target_label\""
        fi
        # second menu level loop
        while true; do
            option_index="$(echo "$option_display"| rofi "${rofi_second_params[@]}")"
            [[ -z $option_index ]] && break
            option_command="${commands[${options[$option_index]}]}"
            execute_option "$targeting_command" "$option_command"
        done
    done
}

parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--first-theme)
                FIRST_THEME="$2" # Used also for second if second is not given
                shift # past argument
                shift # past value
                ;;
            -s|--second-theme)
                SECOND_THEME="$2"
                shift # past argument
                shift # past value
                ;;
            -p|--playerctl)
                MPRIS_CONTROLLER=$PLAYERCTL
                shift # past argument
                ;;
            -m|--mpris-ctl)
                MPRIS_CONTROLLER=$MPRIS_CTL
                shift # past argument
                ;;
            -h|--help)
                echo -e "$HELP_STR"
                exit 0
                ;;
            *)
                echo -e "$HELP_STR"
                echo "Unknown option \"$1\""
                exit 1
                ;;
        esac
    done

    [[ -z $FIRST_THEME ]] && FIRST_THEME="$DEFAULT_THEME"
    [[ -z $SECOND_THEME ]] && SECOND_THEME="$FIRST_THEME"

    # |  this whole thing is just to make sure that the user isnt
    # V  trying to use a controller that doesnt exist
    if [[ -z $MPRIS_CONTROLLER ]]; then
        if hash mpris-ctl 2>/dev/null; then
            MPRIS_CONTROLLER=$MPRIS_CTL
        elif hash playerctl 2>/dev/null; then
            MPRIS_CONTROLLER=$PLAYERCTL
        else
            echo "No mpris-ctl or playerctl in \$PATH."
            echo -e "$HELP_STR"
            exit 1
        fi
    else
        if [[ "$MPRIS_CONTROLLER" == "$MPRIS_CTL" ]]; then
            if ! hash mpris-ctl 2>/dev/null; then 
                echo "No mpris-ctl in \$PATH."
                echo -e "$HELP_STR"
                exit 1
            fi
        elif [[ "$MPRIS_CONTROLLER" == "$PLAYERCTL" ]]; then
            if ! hash playerctl 2>/dev/null; then
                echo "No playerctl in \$PATH." 
                echo -e "$HELP_STR"
                exit 1
            fi
        else
            # should never happen
            exit 1
        fi
    fi
    if [[ "$MPRIS_CONTROLLER" == "$MPRIS_CTL" ]]; then
        get_opts_mpris_ctl
    elif [[ "$MPRIS_CONTROLLER" == "$PLAYERCTL" ]]; then
        get_opts_playerctl
    else
        # should never happen
        exit 1
    fi
}

#
# mpris-ctl version 
#
get_opts_mpris_ctl() {
    # note: declare makes associative arrays local if no -g flag is passed
    # that was not fun to debug
    declare -Ag commands=(
        ["play"]="play"
        ["pause"]="pause"
        ["play_pause"]="pp"
        ["stop"]="stop"
        ["next"]="next"
        ["prev"]="prev"
        ["loop"]="repeat --track"
        ["shuffle"]="shuffle"
        ["target_all_players"]="--player active --player inactive"
        ["target_all_active_players"]="--player active"
        ["target_all_inactive_players"]="--player inactive"
        ["target_single_player"]="--player"
    )
    execute_option() {
        local targeting_command="$1"
        local option_command="$2"
        eval "mpris-ctl $targeting_command $option_command"
    }
    get_players() {
        mpris-ctl ${commands["target_all_players"]} list
        # mris-ctl exits with 1 if no players are found
        if [[ $? == 1 ]]; then
            rofi -e "No MPRIS players running."
            exit 1
        fi
    }
    get_player_info() {
        local player="$1" 
        local player_info
        if [[ "$(mpris-ctl --player "$player" status)" == "Playing" ]]; then
            local status="${labels["active"]}"
        else
            local status="${labels["inactive"]}"
        fi
        player_info="$status $(mpris-ctl --player "$player" info "%player_name\t%artist_name - %track_name")"
        echo "$player_info"
    }
}

#
# playerctl version
#
get_opts_playerctl() {
    declare -Ag commands=(
        ["play"]="play"
        ["pause"]="pause"
        ["play_pause"]="play-pause"
        ["stop"]="stop"
        ["next"]="next"
        ["prev"]="previous"
        ["loop"]="loop --track"
        ["shuffle"]="shuffle Toggle"
        ["target_all_players"]="-a"
        ["target_all_active_players"]="" # not that simple in playerctl
        ["target_all_inactive_players"]=""
        ["target_single_player"]="-p"
    )
    execute_option() {
        local targeting_command="$1"
        local option_command="$2"
        eval "playerctl $targeting_command $option_command"
    }
    get_players() {
        local players
        players="$(playerctl -l 2>/dev/null)"
        if [[ -z $players ]]; then
            rofi -e "No MPRIS players running."
            exit 1
        fi
        echo -e "$players"
    }
    get_player_info() {
        local player="$1" 
        local player_info
        if [[ "$(playerctl -p "$player" status)" == "Playing" ]]; then
            local status="${labels["active"]}"
        else
            local status="${labels["inactive"]}"
        fi
        player_info="$status $(playerctl -p "$player" metadata --format "{{playerName}}\t{{artist}} - {{title}}")"
        echo -e "$player_info"
    }
}

main "$@"
